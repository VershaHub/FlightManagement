package flight.program;

import java.sql.*;
import java.util.Scanner;

public class Flight_Management {

    // Database connection details
    private static final String url = "jdbc:mysql://localhost:3306/FlightManagement";
    private static final String user = "root";
    private static final String password = "pass@word1";

    // One scanner for whole app
    private static final Scanner scanner = new Scanner(System.in);

    // ================= MAIN ==================
    public static void main(String[] args) {
        Flight_Management fm = new Flight_Management();

        if (!fm.testConnection()) {
            System.out.println("❌ Cannot connect to database. Exiting...");
            return;
        }

        while (true) {
            try {
                System.out.println("\n============= MAIN MENU =============");
                System.out.println("1. User Operations");
                System.out.println("2. Flight Operations");
                System.out.println("3. Exit");
                System.out.println("====================================");
                System.out.print("Enter your choice (1-3): ");

                if (!scanner.hasNextInt()) {
                    System.out.println("❌ Invalid input. Please enter a number.");
                    scanner.nextLine();
                    continue;
                }

                int choice = scanner.nextInt();
                scanner.nextLine();

                switch (choice) {
                    case 1:
                        fm.userMenu();
                        break;
                    case 2:
                        fm.flightMenu();
                        break;
                    case 3:
                        System.out.println("✅ Exiting program. Goodbye!");
                        scanner.close();
                        return;
                    default:
                        System.out.println("❌ Invalid choice. Please enter 1 to 3.");
                }
            } catch (Exception e) {
                e.printStackTrace();
                scanner.nextLine();
            }
        }
    }

    // ================= DB CONNECTION TEST ==================
    public boolean testConnection() {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            try (Connection con = DriverManager.getConnection(url, user, password)) {
                System.out.println("✅ Database connected successfully.");
                return true;
            }
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }

    // ================= USER MENU ==================
    public void userMenu() {
        while (true) {
            System.out.println("\n===== USER MENU =====");
            System.out.println("1. Insert new user");
            System.out.println("2. Update user role");
            System.out.println("3. Delete user");
            System.out.println("4. Back to Main Menu");
            System.out.print("Enter choice: ");

            if (!scanner.hasNextInt()) {
                System.out.println("❌ Invalid input.");
                scanner.nextLine();
                continue;
            }

            int choice = scanner.nextInt();
            scanner.nextLine();

            switch (choice) {
                case 1: insertUser(scanner); break;
                case 2: updateUserRole(scanner); break;
                case 3: deleteUser(scanner); break;
                case 4: return;
                default: System.out.println("❌ Invalid choice.");
            }
        }
    }

    // Insert User
    public void insertUser(Scanner input) {
        String query = "INSERT INTO users(username, password, email, phone, role) VALUES (?, ?, ?, ?, ?)";
        try (
            Connection con = DriverManager.getConnection(url, user, password);
            PreparedStatement stmt = con.prepareStatement(query)
        ) {
            System.out.print("Enter username: ");
            String username = input.nextLine();
            System.out.print("Enter password: ");
            String pwd = input.nextLine();
            System.out.print("Enter email: ");
            String email = input.nextLine();
            System.out.print("Enter phone: ");
            String phone = input.nextLine();
            System.out.print("Enter role (PASSENGER/ADMIN): ");
            String role = input.nextLine().toUpperCase();

            stmt.setString(1, username);
            stmt.setString(2, pwd);
            stmt.setString(3, email);
            stmt.setString(4, phone);
            stmt.setString(5, role);

            int rows = stmt.executeUpdate();
            System.out.println("✅ User inserted successfully. Rows affected: " + rows);

        } catch (SQLIntegrityConstraintViolationException dup) {
            System.out.println("❌ Username or email already exists.");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Update User Role
    public void updateUserRole(Scanner input) {
        String query = "UPDATE users SET role = ? WHERE user_id = ?";
        try (
            Connection con = DriverManager.getConnection(url, user, password);
            PreparedStatement stmt = con.prepareStatement(query)
        ) {
            System.out.print("Enter user_id to update: ");
            while (!input.hasNextInt()) {
                System.out.println("❌ Please enter a valid integer user_id.");
                input.nextLine();
            }
            int userId = input.nextInt();
            input.nextLine();

            System.out.print("Enter new role (PASSENGER/ADMIN): ");
            String role = input.nextLine().toUpperCase();

            stmt.setString(1, role);
            stmt.setInt(2, userId);

            int rows = stmt.executeUpdate();
            if (rows > 0) System.out.println("✅ User role updated successfully.");
            else System.out.println("❌ User ID not found.");

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Delete User
    public void deleteUser(Scanner input) {
        String query = "DELETE FROM users WHERE user_id = ?";
        try (
            Connection con = DriverManager.getConnection(url, user, password);
            PreparedStatement stmt = con.prepareStatement(query)
        ) {
            System.out.print("Enter user_id to delete: ");
            while (!input.hasNextInt()) {
                System.out.println("❌ Please enter a valid integer user_id.");
                input.nextLine();
            }
            int userId = input.nextInt();
            input.nextLine();

            stmt.setInt(1, userId);

            int rows = stmt.executeUpdate();
            if (rows > 0) System.out.println("✅ User deleted successfully.");
            else System.out.println("❌ User ID not found.");

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // ================= FLIGHT MENU ==================
    public void flightMenu() {
        while (true) {
            System.out.println("\n===== FLIGHT MENU =====");
            System.out.println("1. View all flights");
            System.out.println("2. Add new flight");
            System.out.println("3. Update flight");
            System.out.println("4. Remove flight");
            System.out.println("5. Back to Main Menu");
            System.out.print("Enter choice: ");

            if (!scanner.hasNextInt()) {
                System.out.println("❌ Invalid input.");
                scanner.nextLine();
                continue;
            }

            int choice = scanner.nextInt();
            scanner.nextLine();

            switch (choice) {
                case 1: fetchFlights(); break;
                case 2: addFlight(scanner); break;
                case 3: updateFlight(scanner); break;
                case 4: removeFlight(scanner); break;
                case 5: return;
                default: System.out.println("❌ Invalid choice.");
            }
        }
    }

    // View Flights
    public void fetchFlights() {
        String query = "SELECT * FROM flights";
        try (
            Connection con = DriverManager.getConnection(url, user, password);
            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery(query)
        ) {
            System.out.println("\n===== Available Flights =====");
            while (rs.next()) {
                int id = rs.getInt("flight_id");
                String airline = rs.getString("airline");
                String source = rs.getString("source");
                String dest = rs.getString("destination");
                int seats = rs.getInt("total_seats");
                System.out.println(id + " | " + airline + " | " + source + " → " + dest + " | Seats: " + seats);
            }
            System.out.println("===============================");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Add Flight
    public void addFlight(Scanner input) {
        String query = "INSERT INTO flights(airline, source, destination, total_seats) VALUES (?, ?, ?, ?)";
        try (
            Connection con = DriverManager.getConnection(url, user, password);
            PreparedStatement stmt = con.prepareStatement(query)
        ) {
            System.out.print("Enter airline name: ");
            String airline = input.nextLine();
            System.out.print("Enter source city: ");
            String source = input.nextLine();
            System.out.print("Enter destination city: ");
            String dest = input.nextLine();
            System.out.print("Enter total seats: ");
            int seats = input.nextInt();
            input.nextLine();

            stmt.setString(1, airline);
            stmt.setString(2, source);
            stmt.setString(3, dest);
            stmt.setInt(4, seats);

            int rows = stmt.executeUpdate();
            System.out.println("✅ Flight added successfully! Rows affected: " + rows);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Update Flight
    public void updateFlight(Scanner input) {
        String query = "UPDATE flights SET airline = ?, source = ?, destination = ?, total_seats = ? WHERE flight_id = ?";
        try (
            Connection con = DriverManager.getConnection(url, user, password);
            PreparedStatement stmt = con.prepareStatement(query)
        ) {
            System.out.print("Enter flight_id to update: ");
            int id = input.nextInt();
            input.nextLine();

            System.out.print("Enter new airline: ");
            String airline = input.nextLine();
            System.out.print("Enter new source: ");
            String source = input.nextLine();
            System.out.print("Enter new destination: ");
            String dest = input.nextLine();
            System.out.print("Enter new total seats: ");
            int seats = input.nextInt();
            input.nextLine();

            stmt.setString(1, airline);
            stmt.setString(2, source);
            stmt.setString(3, dest);
            stmt.setInt(4, seats);
            stmt.setInt(5, id);

            int rows = stmt.executeUpdate();
            if (rows > 0) System.out.println("✅ Flight updated successfully.");
            else System.out.println("❌ Flight ID not found.");

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Remove Flight
    public void removeFlight(Scanner input) {
        String query = "DELETE FROM flights WHERE flight_id = ?";
        try (
            Connection con = DriverManager.getConnection(url, user, password);
            PreparedStatement stmt = con.prepareStatement(query)
        ) {
            System.out.print("Enter flight_id to delete: ");
            int id = input.nextInt();
            input.nextLine();

            stmt.setInt(1, id);

            int rows = stmt.executeUpdate();
            if (rows > 0) System.out.println("✅ Flight removed successfully.");
            else System.out.println("❌ Flight ID not found.");

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
